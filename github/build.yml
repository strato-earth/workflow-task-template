name: Build, Tag and Push ECR

# Configure triggering rules
on:
  push:
    branches:
      - "STRAT-[0-9]+-*"
      - main
      - master

    tags:
      - "v[0-9]+.[0-9]+.[0-9]+*"

# Setup permissions required for the OIDC trust with AWS
permissions:
  id-token: write
  contents: read

jobs:
  build-artifact:
    name: "Run test and build artifact"
    runs-on: ubuntu-latest

    steps:
      # Checkout the code
      - name: Checkout
        uses: actions/checkout@v4

      - name: "Setup Variables"
        run: |
          echo "REPO_NAME=${GITHUB_REPOSITORY#*/}" >> $GITHUB_ENV
          echo "ENVIRONMENT=BUILD_ENVIRONMENT" >> $GITHUB_ENV

      # If the branch is main or master, tag this artifact as 'latest'
      - if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
        name: "Set the artifacts tag to latest for the main branch"
        run: |
          echo "ARTIFACT_TAG=latest" >> $GITHUB_ENV

      # If the branch is not main, tag this artifact with the name of the tag or branch that triggered this build
      - if: github.ref != 'refs/heads/main' && github.ref != 'refs/heads/master'
        name: "Set the artifacts tag for Feature Branches and GitHub tags"
        run: |
          echo "ARTIFACT_TAG=${{ github.ref_name }}" >> $GITHUB_ENV

      # Login to AWS using pre-configured OIDC
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.BUILD_ARTIFACTS_AWS_ACCOUNT_ID }}:role/github-build-${{ env.REPO_NAME }}
          role-session-name: ${{env.REPO_NAME}}-build
          aws-region: us-west-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registries: ${{ secrets.BUILD_ARTIFACTS_AWS_ACCOUNT_ID }}

      - name: Get Wrapper Scripts
        run: |
          mkdir -p scripts/strato
          aws s3 cp s3://${{ secrets.BUILD_S3_ARTIFACTS_BUCKET }}/strato-workflow-tasks-wrapper/strato-workflow-tasks-wrapper.zip .
          unzip -o -j strato-workflow-tasks-wrapper.zip "src/bash/*" -d scripts/strato/

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Cache Docker Layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build and Push Dockerfile
        id: build-push-container
        uses: docker/build-push-action@v6
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: .
          file: Dockerfile
          build-args: GH_TOKEN=${{ secrets.GH_TOKEN }}
          tags: ${{ steps.login-ecr.outputs.registry }}/${{env.REPO_NAME}}:${{env.ARTIFACT_TAG}},${{ steps.login-ecr.outputs.registry }}/${{env.REPO_NAME}}:${{github.sha}}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
          push: true

        # Temp fix
        # https://github.com/docker/build-push-action/issues/252
        # https://github.com/moby/buildkit/issues/1896
      - name: Move Docker Cache 
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      # Push the build artifact to S3 named with the Commit SHA, and also a text file named with github.ref_name ("latest" for main or master) containing the commit SHA for reference.
      - if: ${{ !startsWith(github.ref, 'refs/heads/dependabot/') }}
        name: "Upload the build artifact to S3"
        run: |
          echo ${{github.sha}} > '${{env.REPO_NAME}}-${{env.ARTIFACT_TAG}}.txt'
          aws s3 cp '${{env.REPO_NAME}}-${{env.ARTIFACT_TAG}}.txt' s3://${{ secrets.BUILD_S3_ARTIFACTS_BUCKET }}/container/${{env.REPO_NAME}}/

      # Update Workflow Tasks
      - name: "Update Workflow Tasks"
        run: scripts/strato/update-workflow-tasks.sh -l ${{ steps.login-ecr.outputs.registry }}/${{ env.REPO_NAME }} -v ${{env.ARTIFACT_TAG}}
